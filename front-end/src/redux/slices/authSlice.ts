import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import api from '../../api/api';
import { ILoginResponse } from '../../api/authApi';
import { getToken, removeToken, setToken } from '../../app/useAuth';

export interface AuthState {
  isAuth: boolean | null;
  token: string | null;
  status: 'idle' | 'loading' | 'failed';
};

const initialState: AuthState = {
  isAuth: null,
  token: null,
  status: 'idle',
};

export const validateToken = createAsyncThunk(
  'auth/token',
  async (token: string | null) => {
    if (!token) {
      return {
        statusCode: 404,
        statusMessage: 'not found',
        data: {
          token: null
        }
      }
    }
    return await api.auth.validate({ token });
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    signout: (state) => {
      state.isAuth = false;
      state.token = null;
      removeToken();
    },
    signin: (state, action: PayloadAction<ILoginResponse>) => {
      const isAuth = action.payload.statusCode === 200;
      state.isAuth = isAuth;
      state.token = isAuth ? action.payload.data.token : null;
      if (isAuth) {
        setToken(action.payload.data.token);
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(validateToken.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(validateToken.fulfilled, (state, action) => {
        console.log('validateToken.fulfilled', action.payload);
        const isAuth = action.payload.statusCode === 200;
        state.status = 'idle';
        state.isAuth = isAuth;
        state.token = isAuth ? getToken() : null;
      })
      .addCase(validateToken.rejected, (state) => {
        state.status = 'failed';
      })
  },
});

export const { signin, signout } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

//export const isAuth = (state: RootState) => state.auth.token !== null;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
//export const incrementIfOdd = (amount: number): AppThunk => (dispatch, getState) => {
//    const currentValue = isAuth(getState());
//    if (currentValue % 2 === 1) {
//        dispatch(incrementByAmount(amount));
//    }
//};

export default authSlice.reducer;
